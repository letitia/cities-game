// Generated by CoffeeScript 1.3.3
(function() {
  var GAME, acknowledge_input_city, add_city_tile, computerTurn, curr_city_never_used, curr_letter_starts_cityname, format_name_for_wikipedia, generate_close_word_list, generate_edit_distance_list, get_edit_distance, handle_computer_turn, handle_errors, increment_key_frequency_in_map, is_valid_city, print_countries, update_program_and_display, update_with_new_city,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GAME = {};

  GAME.curr_letter = "";

  GAME.curr_city = [];

  GAME.used_citynames = [];

  GAME.used_countries = {};

  GAME.error = "";

  GAME.alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

  GAME.special_chars = {
    "a": ['\xe0', '\xe1', '\xe2', '\xe3', '\xe4', '\xe5', '\xc2'],
    "e": ['\xe8', '\xe9', '\xea'],
    "i": ['\xed'],
    "o": ['\xf3', '\xf4', '\xf5', '\xf6', '\xf8'],
    "u": ['\xfa', '\xfc'],
    "c": ['\xe7'],
    "d": ['\xf0'],
    "n": ['\xf1'],
    "s": ['\x9a'],
    "ss": ['\xdf'],
    ".": [" ", "-", ";", ""],
    " ": ["'", "-", ";", ""],
    "-": [" ", "'", ";", ""],
    "'": [" ", "-", ";", ""],
    ";": [" ", "'", "-", ""]
  };

  GAME.busy = false;

  window.handle_input_keyup = function(evt) {
    if (evt.keyCode === 13) {
      return handle_submit();
    }
  };

  window.handle_submit = function() {
    var answer_is_valid, cityname;
    cityname = $.trim($('input[name=city_name]').val());
    answer_is_valid = cityname && curr_letter_starts_cityname(cityname) && is_valid_city(cityname) && curr_city_never_used();
    return update_program_and_display(answer_is_valid);
  };

  curr_letter_starts_cityname = function(city) {
    if (GAME.curr_letter) {
      if (!(city[0].toUpperCase() === GAME.curr_letter)) {
        GAME.error = "The first letter of your city must start with " + GAME.curr_letter;
        return false;
      }
    }
    return true;
  };

  is_valid_city = function(input_cityname) {
    var city, city_dict_starting_with, close_names, first_letter, name, _i, _len;
    input_cityname = input_cityname.toLowerCase();
    first_letter = input_cityname[0].toUpperCase();
    city = first_letter + input_cityname.substr(1);
    if (!(first_letter in cities)) {
      GAME.error = "The first letter of your city is not in the English alphabet.";
      return false;
    }
    city_dict_starting_with = cities[first_letter];
    if (input_cityname in city_dict_starting_with) {
      acknowledge_input_city(input_cityname, city_dict_starting_with);
      return true;
    }
    close_names = generate_close_word_list(input_cityname);
    for (_i = 0, _len = close_names.length; _i < _len; _i++) {
      name = close_names[_i];
      if (name in city_dict_starting_with) {
        acknowledge_input_city(name, city_dict_starting_with);
        return true;
      }
    }
    GAME.error = input_cityname + " is NOT a valid city.";
    return false;
  };

  acknowledge_input_city = function(name, dict) {
    var country_id, display_name;
    country_id = dict[name][0];
    display_name = name.toProperCase();
    GAME.curr_city = [display_name, country_id];
    return $('input[name=city_name]').val('');
  };

  generate_close_word_list = function(word) {
    var edit_dist, wordlist;
    word = word.toLowerCase();
    edit_dist = get_edit_distance(word);
    wordlist = [];
    generate_edit_distance_list(word, edit_dist, wordlist);
    return wordlist;
  };

  generate_edit_distance_list = function(word, edit_dist, wordlist) {
    var i, letter, rep, replaced, replacements, _i, _len, _results;
    if (edit_dist === 0) {
      return;
    }
    _results = [];
    for (i = _i = 0, _len = word.length; _i < _len; i = ++_i) {
      letter = word[i];
      if (i > 0) {
        if (letter in GAME.special_chars) {
          replacements = GAME.special_chars[letter];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = replacements.length; _j < _len1; _j++) {
              rep = replacements[_j];
              replaced = word.slice(0, i) + rep + word.slice(i + 1);
              wordlist.push(replaced);
              _results1.push(generate_edit_distance_list(replaced, edit_dist - 1, wordlist));
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
    }
    return _results;
  };

  curr_city_never_used = function() {
    var curr_cityname, unused;
    unused = true;
    curr_cityname = GAME.curr_city[0];
    if (__indexOf.call(GAME.used_citynames, curr_cityname) >= 0) {
      GAME.error = "You've used that city already!";
      unused = false;
    }
    return unused;
  };

  get_edit_distance = function(word) {
    var len;
    len = word.length;
    if (len < 3) {
      return 1;
    }
    if (len < 11) {
      return 2;
    }
    if (len < 15) {
      return 3;
    }
    return 4;
  };

  update_program_and_display = function(city_is_valid) {
    if (city_is_valid) {
      update_with_new_city();
    } else {
      handle_errors();
    }
    $('.usedcities').text(GAME.used_citynames);
    $('.count').text(GAME.used_citynames.length);
    print_countries();
  };

  update_with_new_city = function() {
    var curr_cityname, curr_country;
    curr_cityname = GAME.curr_city[0];
    curr_country = GAME.curr_city[1];
    $('.status').text("You got it!  " + curr_cityname + " is in " + countries[curr_country]);
    GAME.curr_city = [];
    GAME.used_citynames.push(curr_cityname);
    increment_key_frequency_in_map(curr_country, GAME.used_countries);
    add_city_tile(curr_cityname);
    GAME.curr_letter = curr_cityname.slice(-1).toUpperCase();
    return $('.currletter').text(GAME.curr_letter);
  };

  add_city_tile = function(cityname) {
    var tile;
    tile = $('<div class="city" />');
    tile.text(cityname);
    $.get("http://en.wikipedia.org/w/api.php?action=query&titles=" + (format_name_for_wikipedia(cityname)) + "&format=json&prop=images&imlimit=1");
    $.get("http://en.wikipedia.org/w/api.php?action=query&titles=" + (format_name_for_wikipedia(cityname)) + "&format=json&prop=revisions&rvprop=content");
    return $('#content').prepend(tile);
  };

  print_countries = function() {
    var count, id, result, _ref;
    result = "";
    _ref = GAME.used_countries;
    for (id in _ref) {
      count = _ref[id];
      result += "" + countries[id] + ": " + count + "<br />";
    }
    return $('.countries').html(result);
  };

  format_name_for_wikipedia = function(cityname) {};

  handle_computer_turn = function(valid) {
    if (valid) {
      return setTimeout(computerTurn, 1000);
    }
  };

  computerTurn = function() {
    return $('.status').text("Computer's turn...");
  };

  handle_errors = function() {
    return $('.status').text(GAME.error);
  };

  increment_key_frequency_in_map = function(key, map) {
    if (!(key in map)) {
      map[key] = 0;
    }
    return map[key] += 1;
  };

  String.prototype.toProperCase = function() {
    return this.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  };

}).call(this);
