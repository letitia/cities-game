// Generated by CoffeeScript 1.3.3
(function() {
  var acknowledgeInputCity, checkBusyStatus, computerTurn, currCityNeverUsed, currLetterStartsCityname, generateCloseWordList, generateEditDistanceList, getEditDistance, handleComputerTurn, handleErrors, incrementKeyFrequencyInMap, isValidCity, printCountries, resultColor, resultText, setBusy, setNotBusy, testCityIsInvalid, testCityIsValid, testWordsDontMatch, testWordsMatch, updateProgramAndDisplay,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.curr_letter = "";

  window.curr_city = [];

  window.used_citynames = [];

  window.used_countries = {};

  window.error = "";

  window.alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

  window.special_chars = {
    "a": ['\xe0', '\xe1', '\xe2', '\xe3', '\xe4', '\xe5', '\xc2'],
    "e": ['\xe8', '\xe9', '\xea'],
    "i": ['\xed'],
    "o": ['\xf3', '\xf4', '\xf5', '\xf6', '\xf8'],
    "u": ['\xfa', '\xfc'],
    "c": ['\xe7'],
    "d": ['\xf0'],
    "n": ['\xf1'],
    "s": ['\x9a'],
    "ss": ['\xdf'],
    ".": [" ", "-", ";", ""],
    " ": ["'", "-", ";", ""],
    "-": [" ", "'", ";", ""],
    "'": [" ", "-", ";", ""],
    ";": [" ", "'", "-", ""]
  };

  window.busy = false;

  window.handleInputKeyup = function(evt) {
    if (evt.keyCode === 13) {
      return handleSubmit();
    }
  };

  window.handleSubmit = function() {
    var answerIsValid, cityname;
    cityname = $.trim($('input[name=city_name]').val());
    answerIsValid = cityname && currLetterStartsCityname(cityname) && isValidCity(cityname) && currCityNeverUsed();
    updateProgramAndDisplay(answerIsValid);
    return handleComputerTurn();
  };

  currLetterStartsCityname = function(city) {
    if (curr_letter) {
      if (!(city[0].toUpperCase() === curr_letter)) {
        window.error = "The first letter of your city must start with " + curr_letter;
        return false;
      }
    }
    return true;
  };

  isValidCity = function(input_cityname) {
    var city, city_dict_starting_with, close_names, first_letter, name, _i, _len;
    first_letter = input_cityname[0].toUpperCase();
    city = first_letter + input_cityname.substr(1);
    if (!(first_letter in cities)) {
      window.error = "The first letter of your city is not in the English alphabet.";
      return false;
    }
    city_dict_starting_with = cities[first_letter];
    if (input_cityname in city_dict_starting_with) {
      acknowledgeInputCity(input_cityname, city_dict_starting_with);
      return true;
    }
    close_names = generateCloseWordList(input_cityname);
    for (_i = 0, _len = close_names.length; _i < _len; _i++) {
      name = close_names[_i];
      if (name in city_dict_starting_with) {
        acknowledgeInputCity(name, city_dict_starting_with);
        return true;
      }
    }
    window.error = input_cityname + " is NOT a valid city.";
    return false;
  };

  acknowledgeInputCity = function(name, dict) {
    var country_id, display_name;
    country_id = dict[name][0];
    display_name = name.toProperCase();
    window.curr_city = [display_name, country_id];
    return $('input[name=city_name]').val('');
  };

  generateCloseWordList = function(word) {
    var edit_dist, wordlist;
    word = word.toLowerCase();
    edit_dist = getEditDistance(word);
    wordlist = [];
    generateEditDistanceList(word, edit_dist, wordlist);
    return wordlist;
  };

  generateEditDistanceList = function(word, edit_dist, wordlist) {
    var i, letter, rep, replaced, replacements, _i, _len, _results;
    if (edit_dist === 0) {
      return;
    }
    _results = [];
    for (i = _i = 0, _len = word.length; _i < _len; i = ++_i) {
      letter = word[i];
      if (i > 0) {
        if (letter in special_chars) {
          replacements = special_chars[letter];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = replacements.length; _j < _len1; _j++) {
              rep = replacements[_j];
              replaced = word.slice(0, i) + rep + word.slice(i + 1);
              wordlist.push(replaced);
              _results1.push(generateEditDistanceList(replaced, edit_dist - 1, wordlist));
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
    }
    return _results;
  };

  currCityNeverUsed = function() {
    var curr_cityname, unused;
    unused = true;
    curr_cityname = curr_city[0];
    if (__indexOf.call(used_citynames, curr_cityname) >= 0) {
      window.error = "You've used that city already!";
      unused = false;
    }
    return unused;
  };

  getEditDistance = function(word) {
    var len;
    len = word.length;
    if (len < 3) {
      return 1;
    }
    if (len < 11) {
      return 2;
    }
    if (len < 15) {
      return 3;
    }
    return 4;
  };

  updateProgramAndDisplay = function(cityIsValid) {
    var curr_cityname, curr_country;
    if (cityIsValid) {
      curr_cityname = curr_city[0];
      curr_country = curr_city[1];
      $('.status').text("You got it!  " + curr_cityname + " is in " + countries[curr_country]);
      window.curr_city = [];
      used_citynames.push(curr_cityname);
      incrementKeyFrequencyInMap(curr_country, used_countries);
      window.curr_letter = curr_cityname.slice(-1).toUpperCase();
      $('.currletter').text(curr_letter);
    } else {
      handleErrors();
    }
    $('.usedcities').text(used_citynames);
    $('.count').text(used_citynames.length);
    printCountries();
  };

  printCountries = function() {
    var count, id, result;
    result = "";
    for (id in used_countries) {
      count = used_countries[id];
      result += countries[id] + ": " + count + "<br />";
    }
    return $('.countries').html(result);
  };

  handleComputerTurn = function(valid) {
    if (valid) {
      return setTimeout(computerTurn, 1000);
    }
  };

  computerTurn = function() {
    return $('.status').text("Computer's turn...");
  };

  handleErrors = function() {
    return $('.status').text(error);
  };

  incrementKeyFrequencyInMap = function(key, map) {
    if (!(key in map)) {
      map[key] = 0;
    }
    return map[key] += 1;
  };

  checkBusyStatus = function() {
    return setInterval((function() {
      if (busy) {
        return $('#spinner').show();
      } else {
        return $('#spinner').hide();
      }
    }), 10);
  };

  setBusy = function() {
    return $('#spinner').show();
  };

  setNotBusy = function() {
    return $('#spinner').hide();
  };

  window.runTestCases = function() {
    testWordsDontMatch('LA', 'Lazdijai', 2);
    testWordsMatch('Claremont', 'Claremont', 2);
    testWordsDontMatch('Clearmont', 'Claremont', 2);
    testWordsDontMatch('Upton', 'Unity', 2);
    $('.testresults').append($('<br />'));
    testCityIsValid('Stanford');
    testCityIsValid('dubai');
    testCityIsValid('Port-au-prince');
    testCityIsValid('Sault Ste-Marie');
    testCityIsValid('Belem');
    return testCityIsValid('Port au prince');
  };

  testWordsMatch = function(input, city, edit_dist) {
    var $result, passed;
    passed = wordsMatchWithinEditDistance(input, city, edit_dist);
    $result = $('<div />').text("Testing that " + input + " and " + city + " match within " + edit_dist + " ... " + resultText(passed));
    $result.css('color', resultColor(passed));
    return $('.testresults').append($result);
  };

  testWordsDontMatch = function(input, city, edit_dist) {
    var $result, passed;
    passed = !wordsMatchWithinEditDistance(input, city, edit_dist);
    $result = $('<div />').text("Testing that " + input + " and " + city + " do NOT match within " + edit_dist + " ... " + resultText(passed));
    $result.css('color', resultColor(passed));
    return $('.testresults').append($result);
  };

  testCityIsValid = function(cityname) {
    var $result, passed;
    passed = isValidCity(cityname);
    $result = $('<div />').text("Testing that " + cityname + " is valid ... " + resultText(passed));
    $result.css('color', resultColor(passed));
    return $('.testresults').append($result);
  };

  testCityIsInvalid = function(cityname) {
    var $result, passed;
    passed = !isValidCity(cityname);
    $result = $('<div />').text("Testing that " + cityname + " is NOT valid ... " + resultText(passed));
    $result.css('color', resultColor(passed));
    return $('.testresults').append($result);
  };

  resultText = function(passed) {
    if (passed) {
      return 'Passed';
    } else {
      return 'Failed';
    }
  };

  resultColor = function(passed) {
    if (passed) {
      return 'green';
    } else {
      return 'red';
    }
  };

  String.prototype.toProperCase = function() {
    return this.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  };

}).call(this);
